import org.omegat.documentation.*

plugins {
    id 'org.omegat.documentation'
    id 'org.omegat.common-utilities'
    id 'signing'
}

def documentRootDir = 'src_docs'

tasks.register('genDocIndex', Copy) {
    def inputTemplate = layout.projectDirectory.file("${documentRootDir}/template/index.html")
    def docPropsFiles = fileTree(dir: "${documentRootDir}/manual", include: '**/version*.properties')
    def langInformation = docPropsFiles.collect { props ->
        def docVersion = loadProperties(props).version
        ['code'  : props.parentFile.name, 'nomanual': false, 'version': docVersion,
         'name'  : Locale.forLanguageTag(props.parentFile.name.replace('_', '-')).getDisplayName(),
         'status': docVersion == version ? 'up-to-date' : 'out-of-date']
    }
    description = 'Generate the docs index file'
    inputs.files docPropsFiles, inputTemplate
    from inputTemplate
    into layout.buildDirectory.dir("tmp/manual/")
    expand('languages': langInformation)
    doLast {
        copy {
            from layout.buildDirectory.file("tmp/manual/index.html")
            into layout.buildDirectory.dir("docs/manual")
        }
    }
    filteringCharset = 'UTF-8'
}

tasks.register('manualZips') {
    description = 'Build ZIP manuals to bundle into application. Requires container runtime.'
    group = 'documentation'
}

tasks.register('manualHtmls') {
    description = 'Build HTML manuals and zip for all languages. Requires container runtime.'
    finalizedBy genDocIndex
    group = 'documentation'
}

ext.makeDocumentationTasks = { lang ->

    def copyCss = tasks.register("copyCss${lang.capitalize()}", Copy) {
        description 'Copy Images and CSS file to target'
        into layout.buildDirectory.dir("docs/manual/${lang}/")
        from fileTree(dir: "${documentRootDir}/docbook", includes: ['css/*', 'js/*'])
    }

    def copyImages = tasks.register("copyImages${lang.capitalize()}", Copy) {
        description 'Copy Images and CSS file to target'
        into layout.buildDirectory.dir("docs/manual/${lang}/images/")
        from fileTree(dir: layout.projectDirectory.dir("src_docs/manual/${lang}/images/"), include: "*.png")
        from layout.projectDirectory.file("images/OmegaT.svg")
    }

    def docbookHtml = tasks.register("docbookHtml${lang.capitalize()}", DocbookHtmlTask) {
        description = 'Generate chunked HTML documentation'
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/xhtml.xsl"))
        inputFile.set(layout.projectDirectory.file("${documentRootDir}/manual/${lang}/OmegaTUsersManual_xinclude_full.xml"))
        outputFile.set(layout.buildDirectory.file("docs/manual/${lang}/index.html"))
        dependsOn(copyImages, copyCss)
    }
    assemble.dependsOn docbookHtml
    manualHtmls.dependsOn docbookHtml

    def zipTask = tasks.register("manualZip${lang.capitalize()}", Zip) {
        from fileTree(dir: layout.buildDirectory.file("docs/manual/${lang}"))
        from fileTree(dir: "${documentRootDir}/manual/${lang}", include: '**/version*.properties')
        archiveFileName = "${lang}.zip"
        destinationDirectory = file(layout.buildDirectory.dir("docs/manuals/"))
        // dependsOn buildDocumentTask
        dependsOn docbookHtml
    }
    assemble.dependsOn zipTask
    manualZips.dependsOn zipTask
}

tasks.register('firstSteps') {
    description = 'Build first pages for all languages at docs/greetings/. Requires Docker.'
    group = 'documentation'
}
assemble.dependsOn firstSteps

ext.makeFirstStepTask = { lang ->
    def firstStepsHtmlFinally = tasks.register("firstSteps${lang.capitalize()}Finally", Copy) {
        from layout.projectDirectory.file("${documentRootDir}/style/omegat.css")
        into layout.buildDirectory.dir("docs/greetings/${lang}/")
    }
    def firstStepsHtml = tasks.register("firstSteps${lang.capitalize()}", DocbookHtmlTask) {
        description 'Generate chunked HTML documentation'
        inputFile.set(file("${documentRootDir}/greeting/${lang}/First_Steps.xml"))
        outputFile.set(layout.buildDirectory.file("docs/greetings/${lang}/first_steps.html"))
        styleSheetFile.set(layout.projectDirectory.file("${documentRootDir}/xsl/html.xsl"))
        finalizedBy firstStepsHtmlFinally
    }
    firstSteps.dependsOn firstStepsHtml
}
